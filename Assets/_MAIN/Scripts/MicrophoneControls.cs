//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/_MAIN/Scripts/MicrophoneControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MicrophoneControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MicrophoneControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MicrophoneControls"",
    ""maps"": [
        {
            ""name"": ""Microphone"",
            ""id"": ""416dc700-6986-4b6a-887b-82a47c71c9a0"",
            ""actions"": [
                {
                    ""name"": ""Record"",
                    ""type"": ""Button"",
                    ""id"": ""418e77fe-64ee-446f-a255-7aa6d718d18c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d483c4f8-9b06-438e-8194-3597a5c9d591"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Record"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48657a49-834d-4bf7-823e-27acc4d171e1"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Record"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Microphone
        m_Microphone = asset.FindActionMap("Microphone", throwIfNotFound: true);
        m_Microphone_Record = m_Microphone.FindAction("Record", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Microphone
    private readonly InputActionMap m_Microphone;
    private List<IMicrophoneActions> m_MicrophoneActionsCallbackInterfaces = new List<IMicrophoneActions>();
    private readonly InputAction m_Microphone_Record;
    public struct MicrophoneActions
    {
        private @MicrophoneControls m_Wrapper;
        public MicrophoneActions(@MicrophoneControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Record => m_Wrapper.m_Microphone_Record;
        public InputActionMap Get() { return m_Wrapper.m_Microphone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MicrophoneActions set) { return set.Get(); }
        public void AddCallbacks(IMicrophoneActions instance)
        {
            if (instance == null || m_Wrapper.m_MicrophoneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MicrophoneActionsCallbackInterfaces.Add(instance);
            @Record.started += instance.OnRecord;
            @Record.performed += instance.OnRecord;
            @Record.canceled += instance.OnRecord;
        }

        private void UnregisterCallbacks(IMicrophoneActions instance)
        {
            @Record.started -= instance.OnRecord;
            @Record.performed -= instance.OnRecord;
            @Record.canceled -= instance.OnRecord;
        }

        public void RemoveCallbacks(IMicrophoneActions instance)
        {
            if (m_Wrapper.m_MicrophoneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMicrophoneActions instance)
        {
            foreach (var item in m_Wrapper.m_MicrophoneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MicrophoneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MicrophoneActions @Microphone => new MicrophoneActions(this);
    public interface IMicrophoneActions
    {
        void OnRecord(InputAction.CallbackContext context);
    }
}
